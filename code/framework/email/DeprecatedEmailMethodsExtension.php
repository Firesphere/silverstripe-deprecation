<?php

/**
 * Created by IntelliJ IDEA.
 * User: simon
 * Date: 20/03/16
 * Time: 17:00
 */
class DeprecatedEmailMethodsExtension extends DataExtension
{
    /**
     * @deprecated since version 4.0
     */
    public static function set_mailer(Mailer $mailer) {
        Deprecation::notice('4.0', 'Use Injector to override the Mailer service');
        Injector::inst()->registerService($mailer, 'Mailer');
    }

    /**
     * @deprecated since version 4.0
     */
    public function setBounceHandlerURL($bounceHandlerURL) {
        Deprecation::notice('4.0', 'Use "emailbouncehandler" module');
    }

    public function attachFile($filename, $attachedFilename = null, $mimetype = null) {
        if(!$attachedFilename) $attachedFilename = basename($filename);
        $absoluteFileName = Director::getAbsFile($filename);
        if(file_exists($absoluteFileName)) {
            $this->attachFileFromString(file_get_contents($absoluteFileName), $attachedFilename, $mimetype);
        } else {
            user_error("Could not attach '$absoluteFileName' to email. File does not exist.", E_USER_NOTICE);
        }
        return $this;
    }

    /**
     * Used as a default sender address in the {@link Email} class
     * unless overwritten. Also shown to users on live environments
     * as a contact address on system error pages.
     *
     * Used by {@link Email->send()}, {@link Email->sendPlain()}, {@link Debug->friendlyError()}.
     *
     * @deprecated 4.0 Use the "Email.admin_email" config setting instead
     * @param string $newEmail
     */
    public static function setAdminEmail($newEmail) {
        Deprecation::notice('4.0', 'Use the "Email.admin_email" config setting instead');
        Config::inst()->update('Email', 'admin_email', $newEmail);
    }

    /**
     * @deprecated 4.0 Use the "Email.admin_email" config setting instead
     * @return string
     */
    public static function getAdminEmail() {
        Deprecation::notice('4.0', 'Use the "Email.admin_email" config setting instead');
        return Config::inst()->get('Email', 'admin_email');
    }

    /**
     * Send every email generated by the Email class to the given address.
     * It will also add " [addressed to (email), cc to (email), bcc to (email)]" to the end of the subject line
     * This can be used when testing, by putting a command like this in your _config.php file
     *
     * if(!Director::isLive()) Email::send_all_emails_to("someone@example.com")
     *
     * @deprecated 4.0 Use the "Email.send_all_emails_to" config setting instead
     */
    public static function send_all_emails_to($emailAddress) {
        Deprecation::notice('4.0', 'Use the "Email.send_all_emails_to" config setting instead');
        Config::inst()->update('Email', 'send_all_emails_to', $emailAddress);
    }

    /**
     * CC every email generated by the Email class to the given address.
     * It won't affect the original delivery in the same way that send_all_emails_to does.	It just adds a CC header
     * with the given email address.	Note that you can only call this once - subsequent calls will overwrite the
     * configuration variable.
     *
     * This can be used when you have a system that relies heavily on email and you want someone to be checking all
     * correspondence.
     *
     * if(Director::isLive()) Email::cc_all_emails_to("supportperson@example.com")
     *
     * @deprecated 4.0 Use the "Email.cc_all_emails_to" config setting instead
     */
    public static function cc_all_emails_to($emailAddress) {
        Deprecation::notice('4.0', 'Use the "Email.cc_all_emails_to" config setting instead');
        Config::inst()->update('Email', 'cc_all_emails_to', $emailAddress);
    }

    /**
     * BCC every email generated by the Email class to the given address.
     * It won't affect the original delivery in the same way that send_all_emails_to does.	It just adds a BCC header
     * with the given email address.	Note that you can only call this once - subsequent calls will overwrite the
     * configuration variable.
     *
     * This can be used when you have a system that relies heavily on email and you want someone to be checking all
     * correspondence.
     *
     * if(Director::isLive()) Email::cc_all_emails_to("supportperson@example.com")
     *
     * @deprecated 4.0 Use the "Email.bcc_all_emails_to" config setting instead
     */
    public static function bcc_all_emails_to($emailAddress) {
        Deprecation::notice('4.0', 'Use the "Email.bcc_all_emails_to" config setting instead');
        Config::inst()->update('Email', 'bcc_all_emails_to', $emailAddress);
    }

}